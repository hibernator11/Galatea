'use strict';

var should = require('should'),
  request = require('supertest'),
  path = require('path'),
  mongoose = require('mongoose'),
  User = mongoose.model('User'),
  Book = mongoose.model('Book'),
  express = require(path.resolve('./config/lib/express'));

/**
 * Globals
 */
var app, agent, credentials, user, book;

/**
 * Book routes tests
 */
describe('Book CRUD tests', function () {

  before(function (done) {
    // Get application
    app = express.init(mongoose);
    agent = request.agent(app);

    done();
  });

  beforeEach(function (done) {
    // Create user credentials
    credentials = {
      username: 'username',
      password: 'M3@n.jsI$Aw3$0m3'
    };

    // Create a new user
    user = new User({
      firstName: 'Full',
      lastName: 'Name',
      displayName: 'Full Name',
      email: 'test@test.com',
      username: credentials.username,
      password: credentials.password,
      provider: 'local'
    });

    // Save a user to the test db and create new book
    user.save(function () {
      book = {
        title: 'Book Title',
        content: 'Book Content'
      };

      done();
    });
  });

  it('should be able to save an book if logged in', function (done) {
    agent.post('/api/auth/signin')
      .send(credentials)
      .expect(200)
      .end(function (signinErr, signinRes) {
        // Handle signin error
        if (signinErr) {
          return done(signinErr);
        }

        // Get the userId
        var userId = user.id;

        // Save a new book
        agent.post('/api/books')
          .send(book)
          .expect(200)
          .end(function (bookSaveErr, bookSaveRes) {
            // Handle book save error
            if (bookSaveErr) {
              return done(bookSaveErr);
            }

            // Get a list of books
            agent.get('/api/books')
              .end(function (booksGetErr, booksGetRes) {
                // Handle book save error
                if (booksGetErr) {
                  return done(booksGetErr);
                }

                // Get books list
                var books = booksGetRes.body;

                // Set assertions
                (books[0].user._id).should.equal(userId);
                (books[0].title).should.match('Book Title');

                // Call the assertion callback
                done();
              });
          });
      });
  });

  it('should not be able to save an book if not logged in', function (done) {
    agent.post('/api/books')
      .send(book)
      .expect(403)
      .end(function (bookSaveErr, bookSaveRes) {
        // Call the assertion callback
        done(bookSaveErr);
      });
  });

  it('should not be able to save an book if no title is provided', function (done) {
    // Invalidate title field
    book.title = '';

    agent.post('/api/auth/signin')
      .send(credentials)
      .expect(200)
      .end(function (signinErr, signinRes) {
        // Handle signin error
        if (signinErr) {
          return done(signinErr);
        }

        // Get the userId
        var userId = user.id;

        // Save a new book
        agent.post('/api/books')
          .send(book)
          .expect(400)
          .end(function (bookSaveErr, bookSaveRes) {
            // Set message assertion
            (bookSaveRes.body.message).should.match('Title cannot be blank');

            // Handle book save error
            done(bookSaveErr);
          });
      });
  });

  it('should be able to update an book if signed in', function (done) {
    agent.post('/api/auth/signin')
      .send(credentials)
      .expect(200)
      .end(function (signinErr, signinRes) {
        // Handle signin error
        if (signinErr) {
          return done(signinErr);
        }

        // Get the userId
        var userId = user.id;

        // Save a new book
        agent.post('/api/bookes')
          .send(book)
          .expect(200)
          .end(function (bookSaveErr, bookSaveRes) {
            // Handle book save error
            if (bookSaveErr) {
              return done(bookSaveErr);
            }

            // Update book title
            book.title = 'WHY YOU GOTTA BE SO MEAN?';

            // Update an existing book
            agent.put('/api/books/' + bookSaveRes.body._id)
              .send(book)
              .expect(200)
              .end(function (bookUpdateErr, bookUpdateRes) {
                // Handle book update error
                if (bookUpdateErr) {
                  return done(bookUpdateErr);
                }

                // Set assertions
                (bookUpdateRes.body._id).should.equal(bookSaveRes.body._id);
                (bookUpdateRes.body.title).should.match('WHY YOU GOTTA BE SO MEAN?');

                // Call the assertion callback
                done();
              });
          });
      });
  });

  it('should be able to get a list of books if not signed in', function (done) {
    // Create new book model instance
    var bookObj = new Book(book);

    // Save the book
    bookObj.save(function () {
      // Request books
      request(app).get('/api/books')
        .end(function (req, res) {
          // Set assertion
          res.body.should.be.instanceof(Array).and.have.lengthOf(1);

          // Call the assertion callback
          done();
        });

    });
  });

  it('should be able to get a single book if not signed in', function (done) {
    // Create new book model instance
    var bookObj = new Book(book);

    // Save the book
    bookObj.save(function () {
      request(app).get('/api/books/' + bookObj._id)
        .end(function (req, res) {
          // Set assertion
          res.body.should.be.instanceof(Object).and.have.property('title', book.title);

          // Call the assertion callback
          done();
        });
    });
  });

  it('should return proper error for single book with an invalid Id, if not signed in', function (done) {
    // test is not a valid mongoose Id
    request(app).get('/api/books/test')
      .end(function (req, res) {
        // Set assertion
        res.body.should.be.instanceof(Object).and.have.property('message', 'Book is invalid');

        // Call the assertion callback
        done();
      });
  });

  it('should return proper error for single book which doesnt exist, if not signed in', function (done) {
    // This is a valid mongoose Id but a non-existent book
    request(app).get('/api/books/559e9cd815f80b4c256a8f41')
      .end(function (req, res) {
        // Set assertion
        res.body.should.be.instanceof(Object).and.have.property('message', 'No book with that identifier has been found');

        // Call the assertion callback
        done();
      });
  });

  it('should be able to delete an book if signed in', function (done) {
    agent.post('/api/auth/signin')
      .send(credentials)
      .expect(200)
      .end(function (signinErr, signinRes) {
        // Handle signin error
        if (signinErr) {
          return done(signinErr);
        }

        // Get the userId
        var userId = user.id;

        // Save a new book
        agent.post('/api/books')
          .send(book)
          .expect(200)
          .end(function (bookSaveErr, bookSaveRes) {
            // Handle book save error
            if (bookSaveErr) {
              return done(bookSaveErr);
            }

            // Delete an existing book
            agent.delete('/api/books/' + bookSaveRes.body._id)
              .send(book)
              .expect(200)
              .end(function (bookDeleteErr, bookDeleteRes) {
                // Handle book error error
                if (bookDeleteErr) {
                  return done(bookDeleteErr);
                }

                // Set assertions
                (bookDeleteRes.body._id).should.equal(bookSaveRes.body._id);

                // Call the assertion callback
                done();
              });
          });
      });
  });

  it('should not be able to delete an book if not signed in', function (done) {
    // Set book user
    book.user = user;

    // Create new book model instance
    var bookObj = new Book(book);

    // Save the book
    bookObj.save(function () {
      // Try deleting book
      request(app).delete('/api/books/' + bookObj._id)
        .expect(403)
        .end(function (bookDeleteErr, bookDeleteRes) {
          // Set message assertion
          (bookDeleteRes.body.message).should.match('User is not authorized');

          // Handle book error error
          done(bookDeleteErr);
        });

    });
  });

  afterEach(function (done) {
    User.remove().exec(function () {
      Book.remove().exec(done);
    });
  });
});
